// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package http

import (
	"context"
	"github.com/compico/em-task/internal/pkg/config"
	"github.com/compico/em-task/internal/pkg/di"
	"github.com/compico/em-task/internal/pkg/logger"
	"github.com/compico/em-task/web"
	"github.com/compico/em-task/web/handlers"
	"github.com/compico/em-task/web/router"
)

// Injectors from wire.go:

func InitializeApp(ctx context.Context, filepath string) (*App, error) {
	configConfig, err := config.NewConfig(filepath)
	if err != nil {
		return nil, err
	}
	httpServer := di.HttpServerConfigProvider(configConfig)
	slog := di.SlogConfigProvider(configConfig)
	level := di.SlogLevelProvider(slog)
	writer := di.SlogWriterProvider()
	slogReplacerAttribute := di.SlogReplacerAttrProvider()
	handlerOptions := di.SlogJsonHandlerOptionsProvider(slog, slogReplacerAttribute)
	handler := di.SlogJsonHandlerProvider(writer, handlerOptions)
	slogLogger := di.SlogProvider(handler)
	loggerLogger := logger.NewLogger(level, slogLogger)
	getInfo := handlers.NewGetInfo(loggerLogger)
	serveMux := router.NewServerMux(getInfo)
	server := di.HttpServerProvider(httpServer, loggerLogger, serveMux)
	webServer := web.NewServer(server)
	app := &App{
		server: webServer,
		logger: loggerLogger,
	}
	return app, nil
}

// wire.go:

type (
	App struct {
		server web.Server
		logger logger.Logger
	}
)
