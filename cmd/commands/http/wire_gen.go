// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package http

import (
	"context"
	di2 "github.com/compico/em-task/cmd/di"
	"github.com/compico/em-task/internal/pkg/config"
	"github.com/compico/em-task/pkg/logger"
	"github.com/compico/em-task/pkg/postgres"
	"github.com/compico/em-task/web"
	"github.com/compico/em-task/web/handlers"
	"github.com/compico/em-task/web/router"
)

// Injectors from wire.go:

func InitializeApp(ctx context.Context, filepath string) (*App, func(), error) {
	configConfig, err := config.NewConfig(filepath)
	if err != nil {
		return nil, nil, err
	}
	httpServer := di2.HttpServerConfigProvider(configConfig)
	slog := di2.SlogConfigProvider(configConfig)
	level := di2.SlogLevelProvider(slog)
	writer := di2.SlogWriterProvider()
	slogReplacerAttribute := di2.SlogReplacerAttrProvider()
	handlerOptions := di2.SlogJsonHandlerOptionsProvider(slog, slogReplacerAttribute)
	handler := di2.SlogJsonHandlerProvider(writer, handlerOptions)
	slogLogger := di2.SlogProvider(handler)
	loggerLogger := logger.NewLogger(level, slogLogger)
	database := di2.DatabaseConfigProvider(configConfig)
	connectionConfig := di2.ConnectionConfigProvider(database)
	pool, cleanup, err := postgres.NewConnection(ctx, connectionConfig)
	if err != nil {
		return nil, nil, err
	}
	db := postgres.NewDatabase(ctx, pool)
	healthCheckHandler := handlers.NewHealthCheck(loggerLogger, db)
	subscriptionHandlers := handlers.NewSubscriptionHandler()
	serveMux := router.NewServerMux(healthCheckHandler, subscriptionHandlers)
	server := di2.HttpServerProvider(httpServer, loggerLogger, serveMux)
	webServer := web.NewServer(server)
	app := &App{
		server: webServer,
		logger: loggerLogger,
		pg:     db,
	}
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

type (
	App struct {
		server web.Server
		logger logger.Logger
		pg     postgres.DB
	}
)
