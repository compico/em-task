// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package migrate

import (
	"context"
	"github.com/compico/em-task/internal/pkg/config"
	"github.com/compico/em-task/internal/pkg/di"
	"github.com/compico/em-task/pkg/logger"
	"github.com/golang-migrate/migrate/v4"
)

import (
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
)

// Injectors from wire.go:

func InitializeMigrator(ctx context.Context, filepath string) (*Migrator, error) {
	configConfig, err := config.NewConfig(filepath)
	if err != nil {
		return nil, err
	}
	slog := di.SlogConfigProvider(configConfig)
	level := di.SlogLevelProvider(slog)
	writer := di.SlogWriterProvider()
	slogReplacerAttribute := di.SlogReplacerAttrProvider()
	handlerOptions := di.SlogJsonHandlerOptionsProvider(slog, slogReplacerAttribute)
	handler := di.SlogJsonHandlerProvider(writer, handlerOptions)
	slogLogger := di.SlogProvider(handler)
	loggerLogger := logger.NewLogger(level, slogLogger)
	database := di.DatabaseConfigProvider(configConfig)
	migrate, err := MigrateProvider(database)
	if err != nil {
		return nil, err
	}
	migrator := &Migrator{
		logger:  loggerLogger,
		migrate: migrate,
	}
	return migrator, nil
}

// wire.go:

type (
	Migrator struct {
		logger  logger.Logger
		migrate *migrate.Migrate
	}
)

func MigrateProvider(dbConfig config.Database) (*migrate.Migrate, error) {
	return migrate.New(
		dbConfig.GetMigrationSource(),
		dbConfig.GetDsn(),
	)
}
